swagger: '2.0'
info:
  version: v1
  title: customer
  description: This is sample API being generated by cedrus-api generator
host: 'localhost:2002'
basePath: /api
schemes:
  - https
produces:
  - application/json
paths:
  /customers/v1:
    get:
      tags:
        - Customer
      description: Gets all customers from the system that the user has access to
      operationId: getCustomer
      produces:
        - application/json
      x-swagger-router-controller: Customer
      responses:
        '200':
          description: customer response
          schema:
            type: array
            items:
              $ref: '#/definitions/customersv1'
        '404':
          description: customer response
          schema:
            type: object
        '500':
          description: customer response
          schema:
            type: object
      parameters:
        - name: pageSize
          in: query
          description: Number of records returned
          type: integer
        - name: pageNumber
          in: query
          description: Page number
          type: integer
        - name: customerName
          in: query
          description: customer name
          type: string
        - name: customerNumber
          in: query
          description: customer number
          type: string
    put:
      tags:
        - Customer
      description: Puts all customers from the system that the user has access to
      operationId: putCustomer
      produces:
        - application/json
      consumes:
        - application/json
      x-swagger-router-controller: Customer
      responses:
        '204':
          description: customer response
          schema:
            type: array
            items:
              $ref: '#/definitions/customersv1'
        '404':
          description: customer response
          schema:
            type: object
        '500':
          description: customer response
          schema:
            type: object
      parameters:
        - name: customers/v1
          in: body
          schema:
            $ref: '#/definitions/customersv1'
    post:
      tags:
        - Customer
      description: Posts all customers from the system that the user has access to
      operationId: postCustomer
      produces:
        - application/json
      consumes:
        - application/json
      x-swagger-router-controller: Customer
      responses:
        '204':
          description: customer response
          schema:
            type: array
            items:
              $ref: '#/definitions/customersv1'
        '404':
          description: customer response
          schema:
            type: object
        '500':
          description: customer response
          schema:
            type: object
      parameters:
        - name: customers/v1
          in: body
          schema:
            $ref: '#/definitions/customersv1'
    patch:
      tags:
        - Customer
      description: Patchs all customers from the system that the user has access to
      operationId: patchCustomer
      produces:
        - application/json
      consumes:
        - application/json
      x-swagger-router-controller: Customer
      responses:
        '204':
          description: customer response
          schema:
            type: array
            items:
              $ref: '#/definitions/customersv1'
        '404':
          description: customer response
          schema:
            type: object
        '500':
          description: customer response
          schema:
            type: object
    delete:
      tags:
        - Customer
      description: Deletes all customers from the system that the user has access to
      operationId: deleteCustomer
      produces:
        - application/json
      consumes:
        - application/json
      x-swagger-router-controller: Customer
      responses:
        '204':
          description: customer response
          schema:
            type: array
            items:
              $ref: '#/definitions/customersv1'
        '404':
          description: customer response
          schema:
            type: object
        '500':
          description: customer response
          schema:
            type: object
      parameters:
        - name: customers/v1
          in: body
          schema:
            $ref: '#/definitions/customersv1'
definitions:
  ApiError:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  customersv1:
    type: object
    properties:
      CustomerInfoRequest:
        type: object
        properties:
          requestStdInfo:
            type: object
            properties:
              requestAppCode:
                type: string
              requestId:
                type: string
            required:
              - requestAppCode
              - requestId
          customerInfo:
            type: object
            properties:
              customerName:
                type: string
              customerNumber:
                type: string
              customerPhone:
                type: string
              customerEmail:
                type: string
            required:
              - customerName
              - customerNumber
              - customerPhone
              - customerEmail
          policyInfo:
            type: array
            items:
              type: object
              properties:
                polLob:
                  type: string
                polNum:
                  type: string
                polMod:
                  type: string
                polPrem:
                  type: string
                vehInfo:
                  type: array
                  items:
                    type: object
                    properties:
                      vehYr:
                        type: string
                      vehMk:
                        type: string
                      vehMod:
                        type: string
                      vehComp:
                        type: string
                      vehColl:
                        type: string
                      vehBI:
                        type: string
                      vehPD:
                        type: string
                    required:
                      - vehYr
                      - vehMk
                      - vehMod
                      - vehComp
                      - vehColl
                      - vehBI
                      - vehPD
              required:
                - polLob
                - polNum
                - polMod
                - polPrem
                - vehInfo
        required:
          - requestStdInfo
          - customerInfo
          - policyInfo
    required:
      - CustomerInfoRequest
responses:
  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/ApiError'
  PersonDoesNotExistResponse:
    description: Person does not exist.
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  gateway: datapower-gateway
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:8080'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
          tls-profile: ''
          secure-gateway: false
    catch: []
